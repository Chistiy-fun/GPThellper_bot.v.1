import json

import telebot
from telebot import TeleBot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup
import logging
import requests
from gpt import GPT

gpt = GPT()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S",
    filename="log_file.txt",
    filemode="w",
)

# —Ç–æ–∫–µ–Ω—ã
from config import TOKEN, MAX_TOKENS

# —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
MAX_LETTERS = MAX_TOKENS


def save_to_json():
    with open('users_history.json', 'w', encoding='utf-8') as f:
        json.dump(users_history, f, indent=2, ensure_ascii=False)


def load_from_json():
    # noinspection PyBroadException
    try:
        with open('users_history.json', 'r+', encoding='utf-8') as f:
            data = json.load(f)
    except Exception:
        data = {}

    return data

#
users_history = load_from_json()


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤—ã

def create_keyboard(buttons_list):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_command(message):
    logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start")
    user_name = message.from_user.first_name
    bot.send_message(message.from_user.id, text=f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {user_name}!",
                     reply_markup=create_keyboard(["/solve_task", '/help']))

@bot.message_handler(commands=['help'])
def start_command(message):
    logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help")
    user_name = message.from_user.first_name
    bot.send_message(message.from_user.id, text=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n/solve_task - –∏—Å–ø–æ–ª—å–∑—É–π —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò\n/about - —Ç—É—Ç —è —Ä–∞—Å—Å–∫–æ–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ–±–µ  ",
                     reply_markup=create_keyboard(["/solve_task"]))

@bot.message_handler(commands=['about'])
def start_command(message):
    logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /about")
    user_name = message.from_user.first_name
    bot.send_message(message.from_user.id, text=f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å–Ω–∞—â–µ–Ω –º–∞–≥–∏–µ–π –ò–òü™Ñ\n"
                                                f"—è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n"
                                                f"P.S –Ø –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–≥—É –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—É–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ :")

@bot.message_handler(commands=['solve_task'])
def solve_task(message):
    logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /solve_task")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, get_promt)

@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)

# –§–∏–ª—å—Ç—Ä—ã

def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()

@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message):
    logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã filter_hello")
    user_name = message.from_user.first_name
    bot.send_message(message.from_user.id, text=f"{user_name }, –ü—Ä–∏–≤–µ—Ç–∏–∫!")

def continue_filter(message):
    logging.debug("–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'")
    button_text = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'
    return message.text == button_text

@bot.message_handler(func=continue_filter)
def get_promt(message):
    logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã continue_filter")
    user_id = str(message.from_user.id)

    if not message.text:
        logging.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, get_promt)
        return

 # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_request = message.text

    if gpt.count_tokens(user_request) >= gpt.MAX_TOKENS:
        logging.warning("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤")
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤\n–ò—Å–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å")
        bot.register_next_step_handler(message, get_promt)
        return


    if user_id not in users_history or users_history[user_id] == {}:
        if user_request == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ":
            logging.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ users_history")
            bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.")
            bot.register_next_step_handler(message, get_promt)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ GPT –≤ —Å–ª–æ–≤–∞—Ä–∏–∫ users_history
    users_history[user_id] = {
        'system_content': ("–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ "),
        'user_content': user_request,
        'assistant_content': "–†–µ—à–∏–º –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º:"
        }
    save_to_json()

    prompt = gpt.make_promt(users_history[user_id])
    resp = gpt.send_request(prompt)
    answer = resp.json()['choices'][0]['message']['content']

# users_history...
    users_history[user_id]["assistant_content"] += answer
    save_to_json()

    keyboard = create_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"])
    bot.send_message(message.chat.id, answer, reply_markup=keyboard)

@bot.message_handler(commands=['end'])
@bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
def end_task(message):
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
    user_id = message.from_user.id
    bot.send_message(user_id, "–¢–µ–∫—É—â–∏–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    users_history[user_id] = {}
    solve_task(message)









if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()